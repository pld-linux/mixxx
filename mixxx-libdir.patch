--- mixxx-1.11.0/build/depends.py.orig	2013-05-09 01:20:26.000000000 +0200
+++ mixxx-1.11.0/build/depends.py	2018-10-21 08:31:44.564677062 +0200
@@ -898,9 +898,11 @@
         # RESOURCE_PATH that covers Win and OSX too:
         if build.platform_is_linux or build.platform_is_bsd:
             prefix = SCons.ARGUMENTS.get('prefix', '/usr/local')
-            share_path = os.path.join(prefix, 'share/mixxx')
+            datadir = SCons.ARGUMENTS.get('datadir', os.path.join(prefix, 'share'))
+            share_path = os.path.join(datadir, 'mixxx')
             build.env.Append(CPPDEFINES=('UNIX_SHARE_PATH', r'\"%s\"' % share_path))
-            lib_path = os.path.join(prefix, 'lib/mixxx')
+            libdir = SCons.ARGUMENTS.get('libdir', os.path.join(prefix, 'lib'))
+            lib_path = os.path.join(libdir, 'mixxx')
             build.env.Append(CPPDEFINES=('UNIX_LIB_PATH', r'\"%s\"' % lib_path))
 
     def depends(self, build):
--- mixxx-1.11.0/src/SConscript.orig	2013-05-09 01:20:26.000000000 +0200
+++ mixxx-1.11.0/src/SConscript	2018-10-21 08:35:27.378007853 +0200
@@ -237,6 +237,9 @@
 
 if build.platform_is_linux or build.platform_is_bsd:
         flags['prefix'] = ARGUMENTS.get('prefix', '/usr/local')
+        flags['datadir'] = ARGUMENTS.get('datadir', os.path.join(flags['prefix'], 'share'))
+        flags['bindir'] = ARGUMENTS.get('bindir', os.path.join(flags['prefix'], 'bin'))
+        flags['libdir'] = ARGUMENTS.get('libdir', os.path.join(flags['prefix'], 'lib'))
         if not os.path.exists(flags['prefix']):
                 print "Error: Prefix path does not exist!"
                 Exit(1)
@@ -245,11 +248,11 @@
                 #Basically, the flags['prefix'] is compiled into strings in Mixxx, whereas the install_root is not. When you're
                 #building a Debian package, pbuilder wants to install Mixxx to a temporary directory, but you still need
                 #the compiled-in strings using /usr as the prefix. That's why we have install_root and flags['prefix'].
-                install_root = ARGUMENTS.get('install_root', flags['prefix'])
+                install_root = ARGUMENTS.get('install_root', '')
                 print "Install root: " + install_root
-                unix_share_path = os.path.join(install_root, 'share')
-                unix_bin_path = os.path.join(install_root, 'bin')
-                unix_lib_path = os.path.join(install_root, 'lib')
+                unix_share_path = install_root + flags['datadir']
+                unix_bin_path = install_root + flags['bindir']
+                unix_lib_path = install_root + flags['libdir']
 
                 binary = env.Install(unix_bin_path, binary_files)
                 resource = env.Install(os.path.join(unix_share_path, 'mixxx'), resource_files)
